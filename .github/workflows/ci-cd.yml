name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.6'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      - name: 依赖扫描
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
      - name: 代码安全扫描
        continue-on-error: true
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: 分析代码
        continue-on-error: true
        uses: github/codeql-action/analyze@v2
          
      - name: 设置环境变量
        run: |
          echo "IMAGE_NAME=taskshub" >> $GITHUB_ENV
          
      - name: 容器扫描
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          
      - name: 依赖漏洞扫描
        continue-on-error: true
        uses: actions/dependency-review-action@v2
        with:
          fail-on-severity: high
          
      - name: 运行安全测试
        continue-on-error: true
        run: |
          echo "Running security tests..."
          echo "安全测试报告" > security-report.txt
          # npm run security:test
          
      - name: 上传安全报告
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.txt
          
  build-and-test:
    needs: security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.6'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/

      - name: 发送构建通知
        if: always()
        run: |
          echo "===== 构建状态 ====="
          echo "状态: ${{ job.status }}"
          echo "分支: ${{ github.ref }}"
          echo "提交: ${{ github.sha }}"
          echo "===================="

  deploy:
    needs: [build-and-test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: taskshub
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to ECS
        run: |
          echo "Deploying to ECS..."
          # 这里添加ECS部署命令
          # 例如：aws ecs update-service等

      - name: 部署验证
        run: |
          echo "Verifying deployment..."
          # 这里添加部署验证命令
          # 例如：健康检查、功能测试等

      - name: 部署回滚
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          # 获取上一个成功的部署版本
          PREVIOUS_VERSION=$(aws ecs describe-services --cluster taskshub-cluster --services taskshub-service --query 'services[0].deployments[?status==`PRIMARY`].taskDefinition' --output text)
          
          # 回滚到上一个版本
          aws ecs update-service --cluster taskshub-cluster --service taskshub-service --task-definition $PREVIOUS_VERSION --force-new-deployment
          
          # 等待回滚完成
          aws ecs wait services-stable --cluster taskshub-cluster --services taskshub-service
          
          echo "Rollback completed"

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 发送部署通知
        run: |
          echo "===== 部署状态 ====="
          echo "状态: ${{ job.status }}"
          echo "环境: production"
          echo "分支: ${{ github.ref }}"
          echo "提交: ${{ github.sha }}"
          echo "====================" 